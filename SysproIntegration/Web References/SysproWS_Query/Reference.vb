'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
'
Namespace SysproWS_Query
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="queryclassSoap", [Namespace]:="http://www.syspro.com/ns/query/")>  _
    Partial Public Class queryclass
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private BrowseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NextKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PreviousKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/sysprowebservices/Query.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event BrowseCompleted As BrowseCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchCompleted As FetchCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryCompleted As QueryCompletedEventHandler
        
        '''<remarks/>
        Public Event NextKeyCompleted As NextKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event PreviousKeyCompleted As PreviousKeyCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.syspro.com/ns/query/Browse", RequestNamespace:="http://www.syspro.com/ns/query/", ResponseNamespace:="http://www.syspro.com/ns/query/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Browse(ByVal UserId As String, ByVal XMLIn As String) As String
            Dim results() As Object = Me.Invoke("Browse", New Object() {UserId, XMLIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BrowseAsync(ByVal UserId As String, ByVal XMLIn As String)
            Me.BrowseAsync(UserId, XMLIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BrowseAsync(ByVal UserId As String, ByVal XMLIn As String, ByVal userState As Object)
            If (Me.BrowseOperationCompleted Is Nothing) Then
                Me.BrowseOperationCompleted = AddressOf Me.OnBrowseOperationCompleted
            End If
            Me.InvokeAsync("Browse", New Object() {UserId, XMLIn}, Me.BrowseOperationCompleted, userState)
        End Sub
        
        Private Sub OnBrowseOperationCompleted(ByVal arg As Object)
            If (Not (Me.BrowseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BrowseCompleted(Me, New BrowseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.syspro.com/ns/query/Fetch", RequestNamespace:="http://www.syspro.com/ns/query/", ResponseNamespace:="http://www.syspro.com/ns/query/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Fetch(ByVal UserId As String, ByVal XMLIn As String) As String
            Dim results() As Object = Me.Invoke("Fetch", New Object() {UserId, XMLIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchAsync(ByVal UserId As String, ByVal XMLIn As String)
            Me.FetchAsync(UserId, XMLIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchAsync(ByVal UserId As String, ByVal XMLIn As String, ByVal userState As Object)
            If (Me.FetchOperationCompleted Is Nothing) Then
                Me.FetchOperationCompleted = AddressOf Me.OnFetchOperationCompleted
            End If
            Me.InvokeAsync("Fetch", New Object() {UserId, XMLIn}, Me.FetchOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchCompleted(Me, New FetchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.syspro.com/ns/query/Query", RequestNamespace:="http://www.syspro.com/ns/query/", ResponseNamespace:="http://www.syspro.com/ns/query/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Query(ByVal UserId As String, ByVal BusinessObject As String, ByVal XMLIn As String) As String
            Dim results() As Object = Me.Invoke("Query", New Object() {UserId, BusinessObject, XMLIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryAsync(ByVal UserId As String, ByVal BusinessObject As String, ByVal XMLIn As String)
            Me.QueryAsync(UserId, BusinessObject, XMLIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryAsync(ByVal UserId As String, ByVal BusinessObject As String, ByVal XMLIn As String, ByVal userState As Object)
            If (Me.QueryOperationCompleted Is Nothing) Then
                Me.QueryOperationCompleted = AddressOf Me.OnQueryOperationCompleted
            End If
            Me.InvokeAsync("Query", New Object() {UserId, BusinessObject, XMLIn}, Me.QueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryCompleted(Me, New QueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.syspro.com/ns/query/NextKey", RequestNamespace:="http://www.syspro.com/ns/query/", ResponseNamespace:="http://www.syspro.com/ns/query/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NextKey(ByVal UserId As String, ByVal XMLIn As String) As String
            Dim results() As Object = Me.Invoke("NextKey", New Object() {UserId, XMLIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NextKeyAsync(ByVal UserId As String, ByVal XMLIn As String)
            Me.NextKeyAsync(UserId, XMLIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NextKeyAsync(ByVal UserId As String, ByVal XMLIn As String, ByVal userState As Object)
            If (Me.NextKeyOperationCompleted Is Nothing) Then
                Me.NextKeyOperationCompleted = AddressOf Me.OnNextKeyOperationCompleted
            End If
            Me.InvokeAsync("NextKey", New Object() {UserId, XMLIn}, Me.NextKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnNextKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.NextKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NextKeyCompleted(Me, New NextKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.syspro.com/ns/query/PreviousKey", RequestNamespace:="http://www.syspro.com/ns/query/", ResponseNamespace:="http://www.syspro.com/ns/query/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PreviousKey(ByVal UserId As String, ByVal XMLIn As String) As String
            Dim results() As Object = Me.Invoke("PreviousKey", New Object() {UserId, XMLIn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PreviousKeyAsync(ByVal UserId As String, ByVal XMLIn As String)
            Me.PreviousKeyAsync(UserId, XMLIn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PreviousKeyAsync(ByVal UserId As String, ByVal XMLIn As String, ByVal userState As Object)
            If (Me.PreviousKeyOperationCompleted Is Nothing) Then
                Me.PreviousKeyOperationCompleted = AddressOf Me.OnPreviousKeyOperationCompleted
            End If
            Me.InvokeAsync("PreviousKey", New Object() {UserId, XMLIn}, Me.PreviousKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnPreviousKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.PreviousKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PreviousKeyCompleted(Me, New PreviousKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub BrowseCompletedEventHandler(ByVal sender As Object, ByVal e As BrowseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BrowseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub FetchCompletedEventHandler(ByVal sender As Object, ByVal e As FetchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub QueryCompletedEventHandler(ByVal sender As Object, ByVal e As QueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub NextKeyCompletedEventHandler(ByVal sender As Object, ByVal e As NextKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NextKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")>  _
    Public Delegate Sub PreviousKeyCompletedEventHandler(ByVal sender As Object, ByVal e As PreviousKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PreviousKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
